# TinyC++ Lexer README

## Overview
This project implements a lexical analyzer for the TinyC++ programming language. The analyzer reads a TinyC++ source program from standard input and outputs a list of tokens representing keywords, identifiers, literals, and operators.

## Included Files
- **TinyCPPLex.java** – The main driver that invokes the lexer and displays tokens.
- **TinyCPPLexer.java** – The lexical analyzer generated by JFlex from the specification file.
- **ErrorMessage.java** – Utility class for reporting errors.
- **Symbol.java** – Defines token constants used by the lexer.
- **TinyCPP.jflex** – JFlex specification file used to generate `TinyCPPLexer.java`.

## Prerequisites
- Java Development Kit (JDK 8 or higher) must be installed.
- JFlex – Required to generate the lexer from `TinyCPP.jflex`.
- (Optional) JavaCUP – May be required if you extend this project to include parsing.

## Compilation Instructions
1. **Generate the Lexer:**  
   If you have modified `TinyCPP.jflex` or have not yet generated the lexer source, run: jflex TinyCPP.jflex
This command produces the file `TinyCPPLexer.java`.

2. **Compile the Java Files:**  
Compile all Java source files with: javac ErrorMessage.java Symbol.java TinyCPPLex.java TinyCPPLexer.java

If using external libraries (e.g., the JavaCUP runtime), ensure they’re in your classpath:

javac -cp .:java-cup-runtime.jar ErrorMessage.java Symbol.java TinyCPPLex.java TinyCPPLexer.java
 

## Testing Instructions
1. **Prepare a TinyC++ Source File:**  
Create or obtain a sample TinyC++ source program file (e.g., `test.tcpp`).

2. **Run the Lexer:**  
Execute the lexer by redirecting the source file into the program: java TinyCPPLex < test.tcpp

The program will display the TinyC++ source program followed by the list of tokens generated.

## Troubleshooting
- If you receive a "Maximum number of tokens exceeded" error, consider increasing the `MAX_TOKENS` constant in `TinyCPPLex.java`.
- Ensure that all required libraries (JFlex, JavaCUP runtime, etc.) are correctly installed and referenced in your classpath.

Enjoy testing and exploring the TinyC++ Lexer!

